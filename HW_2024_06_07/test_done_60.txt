##############################
1. С помощью какой функции можно проверить принадлежность объекта к определенному классу?
______________________________
[] issubclass
[] isinstance
[] enumerate
[] type
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
2. Что такое полиморфизм в ООП?
______________________________
[] Способность функций обрабатывать данные разных типов
[] Способность класса наследовать свойства и методы другого класса
[] Сокрытие данных
[] Создание новых объектов
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
3. Что такое метод класса в Python?
______________________________
[] Метод, который работает только с экземплярами класса
[] Метод, который вызывается автоматически при создании объекта
[] Метод, который имеет доступ к атрибутам класса, но не к атрибутам экземпляра
[] Метод, который используется для удаления объекта
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
4. Какой декоратор используется для определения метода класса?
______________________________
[] @staticmethod
[] @classmethod
[] @property
[] @abstractmethod
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
5. Как называется концепция, которая позволяет одному интерфейсу использоваться для разных типов объектов?
______________________________
[] Наследование
[] Полиморфизм
[] Инкапсуляция
[] Абстракция
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
6. Какой метод используется для вызова родительского конструктора в классе-наследнике?
______________________________
[] parent.init()
[] this.init()
[] super().__init__()
[] self.init()
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
7. Какой метод используется для освобождения ресурса, связанного с объектом?
______________________________
[] __del__
[] __release__
[] __free__
[] __terminate__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
8. Какой метод используется для сравнения двух объектов?
______________________________
[] __meh__
[] __compare__
[] eq
[] __match__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
9. Что такое MRO (Method Resolution Order) в Python?
______________________________
[] Порядок разрешения методов
[] Порядок загрузки модулей
[] Порядок объявления переменных
[] Порядок создания объектов
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
10. Какой метод используется для преобразования объекта в его строковое представление для отладки?
______________________________
[] __str__
[] __repr__
[] __debug__
[] __trace__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
11. Какой метод используется для получения длины объекта?
______________________________
[] __size__
[] __length__
[] __count__
[] __len__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
12. Какой из следующих методов можно использовать для создания неизменяемых объектов?
______________________________
[] __create__
[] __init__
[] __modify__
[] __new__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
13. Какой метод вызывается для определения порядка (больше или меньше) между двумя объектами?
______________________________
[] __order__
[] __lt__ и __gt__
[] __compare__
[] __less__ и __greater__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
14. Какой метод вызывается для возведения одного объекта в степень другого?
______________________________
[] __power__
[] __exp__
[] __pow__
[] __raise__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
15. Какой шаблон проектирования используется для создания единственного экземпляра класса?
______________________________
[] Одиночка
[] Моносостояние (Builder)
[] Строитель
[] Фабрика
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
16. Какой шаблон проектирования используется для оборачивания объектов в другой объект для добавления новых функциональностей?
______________________________
[] Декоратор
[] Мост
[] Прокси
[] Цепочка обязанностей
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
17. Что из следующего относится к концепции композиции в ООП?
______________________________
[] Класс A, содержащий ссылку на объект класса B
[] Класс, содержащий только методы
[] Класс, содержащий только атрибуты
[] Класс A, содержащий объект класса B
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
18. Что из следующего относится к концепции агрегации в ООП?
______________________________
[] Класс A, наследующий класс B
[] Класс A, содержащий ссылку на объект класса B
[] Класс A, содержащий объект класса B
[] Класс, содержащий только атрибуты
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
19. Как установить атрибуту damage класса Hero новое значение 100?
______________________________
[] setattr(Hero, damage, 100)
[] getattr(Hero, 'damage', 100)
[] setattr(Hero, 'damage', 100)
[] getattr(Hero, damage, 100)
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
20. Что такое атрибут экземпляра?
______________________________
[] Переменная, относящаяся только к конкретному экземпляру класса
[] Переменная, которая является общей для всех экземпляров класса
[] Переменная, определенная вне класса
[] Переменная, доступ к которой можно получить без создания экземпляра класса
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
21. Что произойдет, если вы попытаетесь получить доступ к атрибуту экземпляра, который не был определен?
______________________________
[] Возникает ошибка TypeError
[] Атрибут создается автоматически, и ему присваивается значение «None».
[] правильный вариант ответа
[] Возникает ошибка AttributeError
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
22. Как в Python принято называть первый аргумент любого метода в классе?
______________________________
[] self
[] this
[] cls
[] me
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
23. Какое значение передается в атрибут self?
______________________________
[] object
[] сам класс объекта
[] экземпляр класса, у которого вызвали метод
[] сам класс объекта
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
24. Как определить защищенный метод в Python?
______________________________
[] Добавить двойное подчеркивание в начало имени метода
[] Защищенный метод нельзя создать в python
[] Использовать декоратор protected в методе
[] Добавить подчеркивание в начало имени метода
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
25. Как определить приватный метод в Python?
______________________________
[] Добавить двойное подчеркивание в начало имени метода
[] Защищенный метод нельзя создать в python
[] Использовать декоратор private в методе
[] Добавить подчеркивание в начало имени метода
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
26. В Python добавляют два нижних подчеркивания к именам атрибутов или методов, делая их тем самым приватными. С какой целью это делается?
______________________________
[] Сделать имена методов и атрибутов более читабельными
[] Просто забавы ради
[] Затруднить доступ к именам приватных методов и атрибутов вне класса
[] Упростить доступ к именам приватных методов и атрибутов вне класса
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
27. С какой целью используются геттер-методы?
______________________________
[] Получить значение непубличного атрибута экземпляра
[] Изменить публичный атрибут класса
[] Установить значение непубличного атрибута экземпляра
[] Создать новый экземпляр класса
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
28. В чём преимущество использования геттер-методов?
______________________________
[] Преимуществ нет, геттеры не обязательны
[] Они помогают предотвратить несанкционированный доступ к атрибутам экземпляра
[] Они облегчают изменение значения атрибутов экземпляра
[] Они могут улучшить производительность программы
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
29. Какой из следующих утверждений верное относительно функцииproperty в python?
______________________________
[] Функция property используется для изменения структуры классов
[] Функция property применяется только к функциям с параметрами
[] Функция property применяется для добавления новых методов в классы
[] Функция property позволяет определить методы доступа к атрибутам объекта
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
30. Какой первый аргумент передается в @classmethod?
______________________________
[] Сам метод
[] Экземпляр
[] Класс
[] Атрибут класс
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
31. Как принято называть первый аргумент в @classmethod, который принимает в себя класс ?
______________________________
[] CLASS
[] cls
[] class
[] Class
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
32. Какова цель использования статического метода в классе Python?
______________________________
[] Чтобы изменять атрибуты класса и экземпляра
[] Предоставить метод, который принимает класс в качестве первого аргумента
[] Предоставить метод, который не принимает экземпляр или класс в качестве первого аргумента
[] Предоставить метод, который не принимает никаких аргументов
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
33. Магические методы еще называют «dunder» методом. Что означает термин «dunder»?
______________________________
[] Dynamic Underline
[] Double Underline
[] Dynamic Underscore
[] Double Underscore
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
34. Метод __str__:
______________________________
[] должен возвращать последовательность: кортеж, список или строку
[] может возвращать любой тип данных
[] должен возвращать число
[] должен возвращать строку/строковое представление объекта
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
35. Какова цель метода __abs__ ?
______________________________
[] Объединить две строки
[] Найти абсолютное значение числа или объекта
[] Округлить число с плавающей запятой до ближайшего целого числа
[] Вычислить сумму элементов в итерации
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
36. Для описания поведения экземпляра класса при операции умножения необходимо описать в классе метод
______________________________
[] __multiply__
[] __mul__
[] __mult__
[] __multi__
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
37. Каков синтаксис наследования класса в Python?
______________________________
[] class ParentClass(ChildClass):
[] class ChildClass(ParentClass):
[] class ParentClass: extends ChildClass
[] class ChildClass: extends ParentClass
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
38. Кто из представленных классов не наследуется напрямую от класса object?
______________________________
[] tuple
[] float
[] bool
[] int
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
39. Что такое переопределение метода в Python?
______________________________
[] Процесс определения нового метода в дочернем классе
[] Процесс создания нового атрибута в родительском классе
[] Процесс создания нового метода в родительском классе
[] Процесс изменения поведения метода родительского класса в дочернем классе
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
40. Что необходимо сделать для переопределения метода?
______________________________
[] Создать метод с тем же именем в родительском классе, что и в дочернем
[] Создать метод с отличающимся именем в подклассе от имени метода в родительском классе
[] Создать метод с тем же именем в подклассе, что и в родительском классе
[] Ничего из вышеперечисленного
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
41. Какова цель функции super() в Python?
______________________________
[] Для вызова метода родительского класса
[] Чтобы определить новый атрибут в дочернем классе
[] Создать новый экземпляр дочернего класса
[] Чтобы определить новый метод в дочернем классе
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
42. Что такое «множественное наследование» в Python?
______________________________
[] Процесс определения нескольких атрибутов в одном классе
[] Процесс создания нового класса из нескольких родительских классов
[] Процесс определения нескольких методов в одном классе
[] Процесс создания нескольких дочерних классов из одного родительского класса
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
43. Какова цель порядка разрешения методов (MRO) в Python?
______________________________
[] Убедиться, что правильный класс используется для вызовов методов
[] Определить порядок, в котором выполняются вызовы методов
[] Убедиться, что правильный метод вызывается, когда в иерархии классов определено несколько методов с одним и тем же именем
[] Ничего из вышеперечисленного
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
44. У миксинов есть рекомендация по названию классов. Среди представленных ниже наименований выберите имя, созданное согласно рекомендации:
______________________________
[] NameMixin
[] MixinName
[] Mixin_Name
[] Name_Mixin
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
45. В чём преимущество использования классов миксинов в Python?
______________________________
[] Повышают производительность
[] Они делают код более читаемым
[] Они предотвращают конфликты имен
[] Они уменьшают дублирование кода
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
46. Каков общий вариант использования миксинов в Python?
______________________________
[] Тестирование классов на совместимость
[] Реализация общей функциональности в нескольких классах
[] Создание неизменяемых классов
[] Создание абстрактных базовых классов
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
47. Для какой цели используют атрибут __slots__ в Python?
______________________________
[] Убедиться, что экземпляры класса используют определенный объем памяти
[] Оптимизировать использование памяти в Python, ограничив количество атрибутов, которые можно добавить к экземпляру класса
[] Указать атрибуты, которые должны иметь экземпляры класса
[] Нет правильного варианта ответа
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
48. Какова цель создания собственного класса исключений?
______________________________
[] Для улучшения производительности кода
[] Для создания новых типов данных
[] Для обработки ошибок, которые не покрываются встроенными классами исключений
[] Чтобы переопределить встроенные классы исключений
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
49. Как вы можете создать собственное исключение, которое наследуется от встроенного класса исключений в Python?
______________________________
[] Путём определения новой функции, которая вызывает встроенный класс исключений
[] Используя ключевое слово raise со встроенным классом исключений
[] Используя ключевое слово assert со встроенным классом исключений
[] Путём определения нового класса, наследуемого от встроенного класса исключений
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
50. Какое ключевое слово используется для возбуждения пользовательского исключения в Python?
______________________________
[] raise
[] try
[] finally
[] except
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
51. Что из следующего верно в отношении абстрактных методов в Python?
______________________________
[] Они могут быть определены с конкретной реализацией
[] Они могут быть определены только в конкретных классах
[] Они должны быть определены с конкретной реализацией
[] Они должны быть определены без реализации
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
52. Что произойдёт, когда подкласс не реализует все абстрактные методы абстрактного базового класса?
______________________________
[] Подкласс не может быть создан
[] Подкласс унаследует реализацию абстрактных методов от базового класса
[] Экземпляр подкласса может быть создан, но вызовет ошибку при вызове абстрактного метода
[] Произойдет ошибка в момент вызова класса
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
53. Как называется модуль, в котором находятся функции для создания классов данных?
______________________________
[] dataclasses
[] classdata
[] classdatas
[] dataclass
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
54. Когда в шаблоне Singleton обычно создаётся экземпляр класса?
______________________________
[] Когда программа завершается
[] В начале выполнения программы
[] По требованию или лениво, когда это впервые необходимо
[] Всякий раз, когда вызывается класс-синглтон
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
55. Какое из следующих утверждений об абстрактных классах в Python верно?
______________________________
[] Абстрактный класс должен быть определен в отдельном файле.
[] Все методы в абстрактном классе должны быть абстрактными.
[] Абстрактный класс нельзя использовать в качестве базового класса для конкретного класса
[] Абстрактный класс может иметь сочетание абстрактных и конкретных методов.
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
56. Какой алгоритм используется в реализации MRO в Python 3?
______________________________
[] Поиск в глубину (DFS)
[] Поиск в ширину (BFS)
[] S3 Линеаризация
[] C3 Линеаризация
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
57. В результате расширения у дочернего класса:
______________________________
[] становится меньше методов или атрибутов, чем у родительского
[] становится больше методов или атрибутов, чем у родительского
[] остается такое же количество методов и атрибутов, что и у родительского
[] нет верного варианта
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
58. Что такое переопределение метода в Python?
______________________________
[] Процесс определения нового метода в дочернем классе
[] Процесс создания нового атрибута в родительском классе
[] Процесс создания нового метода в родительском классе
[] Процесс изменения поведения метода родительского класса в дочернем классе
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
59. В python:
______________________________
[] используется утиная типизация
[] не используется утиная типизация
[] частично используется утиная типизация
[] утиной типизации не существует
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



##############################
60. Статический метод:
______________________________
[] имеет доступ к атрибутам экземпляра через cls
[] имеет доступ к атрибутам экземпляра через self
[] не имеет доступа к экземпляру и классу через self и cls
[] имеет доступ к атрибутам класса через self
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾